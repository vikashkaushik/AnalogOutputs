
c:/Users/Vikash/Downloads/AnalogOutputs/target/3.0.0/argon/AnalogOutputs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000011b4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d51d0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e5cc  000d51d4  0001e5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001bc  2003e634  2003e634  0002e634  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d523c  000d523c  0002523c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5264  000d5264  00025264  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00148f7d  00000000  00000000  00025268  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000137dc  00000000  00000000  0016e1e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002d98d  00000000  00000000  001819c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002548  00000000  00000000  001af34e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008270  00000000  00000000  001b1896  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00034e26  00000000  00000000  001b9b06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000338cb  00000000  00000000  001ee92c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00120a75  00000000  00000000  002221f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006574  00000000  00000000  00342c6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f000 ffb3 	bl	d4f98 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f000 ffbb 	bl	d4fb4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5cc 	.word	0x2003e5cc
   d4048:	000d51d4 	.word	0x000d51d4
   d404c:	2003e634 	.word	0x2003e634
   d4050:	2003e634 	.word	0x2003e634
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fbf7 	bl	d4850 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d51a4 	.word	0x000d51a4
   d407c:	000d51c8 	.word	0x000d51c8

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b81b 	b.w	d40ba <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f827 	bl	d40d8 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bba1 	b.w	d47d4 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 ba5f 	b.w	d4554 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 ba65 	b.w	d4564 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40aa:	b510      	push	{r4, lr}
   d40ac:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40ae:	6800      	ldr	r0, [r0, #0]
   d40b0:	b108      	cbz	r0, d40b6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b2:	f000 fa57 	bl	d4564 <free>
class SystemClass {
   d40b6:	4620      	mov	r0, r4
   d40b8:	bd10      	pop	{r4, pc}

000d40ba <setup>:
 * Date:6/30/21
 */
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
// setup() runs once, when the device is first turned on.
void setup() {
   d40ba:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  pinMode(D5, OUTPUT);
   d40bc:	2101      	movs	r1, #1
   d40be:	2005      	movs	r0, #5
   d40c0:	f000 feda 	bl	d4e78 <pinMode>
  pinMode(D6, OUTPUT); 
   d40c4:	2101      	movs	r1, #1
   d40c6:	2006      	movs	r0, #6
   d40c8:	f000 fed6 	bl	d4e78 <pinMode>
  pinMode(D7, OUTPUT);
}
   d40cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(D7, OUTPUT);
   d40d0:	2101      	movs	r1, #1
   d40d2:	2007      	movs	r0, #7
   d40d4:	f000 bed0 	b.w	d4e78 <pinMode>

000d40d8 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d40d8:	b508      	push	{r3, lr}
  // The core of your code will likely live here.
  
  // red
  analogWrite(D7, 255);
   d40da:	21ff      	movs	r1, #255	; 0xff
   d40dc:	2007      	movs	r0, #7
   d40de:	f000 fedc 	bl	d4e9a <_Z11analogWritetm>
  analogWrite(D6,0); // turns it on 
   d40e2:	2100      	movs	r1, #0
   d40e4:	2006      	movs	r0, #6
   d40e6:	f000 fed8 	bl	d4e9a <_Z11analogWritetm>
  analogWrite(D5,0);
   d40ea:	2100      	movs	r1, #0
   d40ec:	2005      	movs	r0, #5
   d40ee:	f000 fed4 	bl	d4e9a <_Z11analogWritetm>
  delay(1000); // delay of 1 second
   d40f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d40f6:	f000 fb33 	bl	d4760 <delay>

  // green
  analogWrite(D7, 0);
   d40fa:	2100      	movs	r1, #0
   d40fc:	2007      	movs	r0, #7
   d40fe:	f000 fecc 	bl	d4e9a <_Z11analogWritetm>
  analogWrite(D6,255); // turns it on 
   d4102:	21ff      	movs	r1, #255	; 0xff
   d4104:	2006      	movs	r0, #6
   d4106:	f000 fec8 	bl	d4e9a <_Z11analogWritetm>
  analogWrite(D5,0);
   d410a:	2100      	movs	r1, #0
   d410c:	2005      	movs	r0, #5
   d410e:	f000 fec4 	bl	d4e9a <_Z11analogWritetm>
  delay(1000); // delay of 1 second
   d4112:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4116:	f000 fb23 	bl	d4760 <delay>


  // blue
  analogWrite(D7, 0);
   d411a:	2100      	movs	r1, #0
   d411c:	2007      	movs	r0, #7
   d411e:	f000 febc 	bl	d4e9a <_Z11analogWritetm>
  analogWrite(D6,0); // turns it on 
   d4122:	2100      	movs	r1, #0
   d4124:	2006      	movs	r0, #6
   d4126:	f000 feb8 	bl	d4e9a <_Z11analogWritetm>
  analogWrite(D5,255);
   d412a:	21ff      	movs	r1, #255	; 0xff
   d412c:	2005      	movs	r0, #5
   d412e:	f000 feb4 	bl	d4e9a <_Z11analogWritetm>
  delay(1000); // delay of 1 second
   d4132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4136:	f000 fb13 	bl	d4760 <delay>

  // orange
  analogWrite(D7, 255);
   d413a:	21ff      	movs	r1, #255	; 0xff
   d413c:	2007      	movs	r0, #7
   d413e:	f000 feac 	bl	d4e9a <_Z11analogWritetm>
  analogWrite(D6,15); // turns it on 
   d4142:	210f      	movs	r1, #15
   d4144:	2006      	movs	r0, #6
   d4146:	f000 fea8 	bl	d4e9a <_Z11analogWritetm>
  analogWrite(D5,0);
   d414a:	2100      	movs	r1, #0
   d414c:	2005      	movs	r0, #5
   d414e:	f000 fea4 	bl	d4e9a <_Z11analogWritetm>
  delay(1000); // delay of 1 second
   d4152:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4156:	f000 fb03 	bl	d4760 <delay>

  // yellow
  analogWrite(D7, 255);
   d415a:	21ff      	movs	r1, #255	; 0xff
   d415c:	2007      	movs	r0, #7
   d415e:	f000 fe9c 	bl	d4e9a <_Z11analogWritetm>
  analogWrite(D6,95); // turns it on 
   d4162:	215f      	movs	r1, #95	; 0x5f
   d4164:	2006      	movs	r0, #6
   d4166:	f000 fe98 	bl	d4e9a <_Z11analogWritetm>
  analogWrite(D5,0);
   d416a:	2100      	movs	r1, #0
   d416c:	2005      	movs	r0, #5
   d416e:	f000 fe94 	bl	d4e9a <_Z11analogWritetm>
  delay(1000); // delay of 1 second
   d4172:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4176:	f000 faf3 	bl	d4760 <delay>

  // purple
  analogWrite(D7, 106);
   d417a:	216a      	movs	r1, #106	; 0x6a
   d417c:	2007      	movs	r0, #7
   d417e:	f000 fe8c 	bl	d4e9a <_Z11analogWritetm>
  analogWrite(D6,13); // turns it on 
   d4182:	210d      	movs	r1, #13
   d4184:	2006      	movs	r0, #6
   d4186:	f000 fe88 	bl	d4e9a <_Z11analogWritetm>
  analogWrite(D5,173);
   d418a:	21ad      	movs	r1, #173	; 0xad
   d418c:	2005      	movs	r0, #5
   d418e:	f000 fe84 	bl	d4e9a <_Z11analogWritetm>
  delay(1000); // delay of 1 second
   d4192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4196:	f000 fae3 	bl	d4760 <delay>

  // cyan
  analogWrite(D7, 0);
   d419a:	2100      	movs	r1, #0
   d419c:	2007      	movs	r0, #7
   d419e:	f000 fe7c 	bl	d4e9a <_Z11analogWritetm>
  analogWrite(D6,255); // turns it on 
   d41a2:	21ff      	movs	r1, #255	; 0xff
   d41a4:	2006      	movs	r0, #6
   d41a6:	f000 fe78 	bl	d4e9a <_Z11analogWritetm>
  analogWrite(D5,255);
   d41aa:	2005      	movs	r0, #5
   d41ac:	21ff      	movs	r1, #255	; 0xff
   d41ae:	f000 fe74 	bl	d4e9a <_Z11analogWritetm>
  delay(1000); // delay of 1 second


 
   d41b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(1000); // delay of 1 second
   d41b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d41ba:	f000 bad1 	b.w	d4760 <delay>
	...

000d41c0 <_GLOBAL__sub_I_SystemMode>:
   d41c0:	b538      	push	{r3, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d41c2:	4c0a      	ldr	r4, [pc, #40]	; (d41ec <_GLOBAL__sub_I_SystemMode+0x2c>)
    SleepResult() {}
   d41c4:	4b0a      	ldr	r3, [pc, #40]	; (d41f0 <_GLOBAL__sub_I_SystemMode+0x30>)
   d41c6:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   d41c8:	2500      	movs	r5, #0
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d41ca:	2003      	movs	r0, #3
              error_(SYSTEM_ERROR_NONE) {
   d41cc:	6025      	str	r5, [r4, #0]
   d41ce:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d41d0:	71a5      	strb	r5, [r4, #6]
        set_system_mode(mode);
   d41d2:	f000 f92b 	bl	d442c <set_system_mode>
SYSTEM_MODE(MANUAL);
   d41d6:	4907      	ldr	r1, [pc, #28]	; (d41f4 <_GLOBAL__sub_I_SystemMode+0x34>)
   d41d8:	4a07      	ldr	r2, [pc, #28]	; (d41f8 <_GLOBAL__sub_I_SystemMode+0x38>)
   d41da:	4620      	mov	r0, r4
   d41dc:	f000 fec4 	bl	d4f68 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d41e0:	4629      	mov	r1, r5
   d41e2:	2001      	movs	r0, #1
   d41e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
SYSTEM_THREAD(ENABLED);
   d41e8:	f000 b930 	b.w	d444c <system_thread_set_state>
   d41ec:	2003e638 	.word	0x2003e638
   d41f0:	ffff0000 	.word	0xffff0000
   d41f4:	000d40ab 	.word	0x000d40ab
   d41f8:	2003e634 	.word	0x2003e634

000d41fc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d41fc:	b508      	push	{r3, lr}
   d41fe:	4b02      	ldr	r3, [pc, #8]	; (d4208 <netdb_freeaddrinfo+0xc>)
   d4200:	681b      	ldr	r3, [r3, #0]
   d4202:	689b      	ldr	r3, [r3, #8]
   d4204:	9301      	str	r3, [sp, #4]
   d4206:	bd08      	pop	{r3, pc}
   d4208:	00030268 	.word	0x00030268

000d420c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d420c:	b508      	push	{r3, lr}
   d420e:	4b02      	ldr	r3, [pc, #8]	; (d4218 <netdb_getaddrinfo+0xc>)
   d4210:	681b      	ldr	r3, [r3, #0]
   d4212:	68db      	ldr	r3, [r3, #12]
   d4214:	9301      	str	r3, [sp, #4]
   d4216:	bd08      	pop	{r3, pc}
   d4218:	00030268 	.word	0x00030268

000d421c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d421c:	b508      	push	{r3, lr}
   d421e:	4b02      	ldr	r3, [pc, #8]	; (d4228 <HAL_Validate_Pin_Function+0xc>)
   d4220:	681b      	ldr	r3, [r3, #0]
   d4222:	685b      	ldr	r3, [r3, #4]
   d4224:	9301      	str	r3, [sp, #4]
   d4226:	bd08      	pop	{r3, pc}
   d4228:	0003022c 	.word	0x0003022c

000d422c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d422c:	b508      	push	{r3, lr}
   d422e:	4b02      	ldr	r3, [pc, #8]	; (d4238 <HAL_Pin_Mode+0xc>)
   d4230:	681b      	ldr	r3, [r3, #0]
   d4232:	689b      	ldr	r3, [r3, #8]
   d4234:	9301      	str	r3, [sp, #4]
   d4236:	bd08      	pop	{r3, pc}
   d4238:	0003022c 	.word	0x0003022c

000d423c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d423c:	b508      	push	{r3, lr}
   d423e:	4b02      	ldr	r3, [pc, #8]	; (d4248 <HAL_Get_Pin_Mode+0xc>)
   d4240:	681b      	ldr	r3, [r3, #0]
   d4242:	68db      	ldr	r3, [r3, #12]
   d4244:	9301      	str	r3, [sp, #4]
   d4246:	bd08      	pop	{r3, pc}
   d4248:	0003022c 	.word	0x0003022c

000d424c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d424c:	b508      	push	{r3, lr}
   d424e:	4b02      	ldr	r3, [pc, #8]	; (d4258 <HAL_DAC_Write+0xc>)
   d4250:	681b      	ldr	r3, [r3, #0]
   d4252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4254:	9301      	str	r3, [sp, #4]
   d4256:	bd08      	pop	{r3, pc}
   d4258:	0003022c 	.word	0x0003022c

000d425c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d425c:	b508      	push	{r3, lr}
   d425e:	4b02      	ldr	r3, [pc, #8]	; (d4268 <hal_pwm_write_ext+0xc>)
   d4260:	681b      	ldr	r3, [r3, #0]
   d4262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d4264:	9301      	str	r3, [sp, #4]
   d4266:	bd08      	pop	{r3, pc}
   d4268:	0003022c 	.word	0x0003022c

000d426c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d426c:	b508      	push	{r3, lr}
   d426e:	4b02      	ldr	r3, [pc, #8]	; (d4278 <HAL_RNG_GetRandomNumber+0xc>)
   d4270:	681b      	ldr	r3, [r3, #0]
   d4272:	685b      	ldr	r3, [r3, #4]
   d4274:	9301      	str	r3, [sp, #4]
   d4276:	bd08      	pop	{r3, pc}
   d4278:	00030218 	.word	0x00030218

000d427c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d427c:	b508      	push	{r3, lr}
   d427e:	4b02      	ldr	r3, [pc, #8]	; (d4288 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4280:	681b      	ldr	r3, [r3, #0]
   d4282:	695b      	ldr	r3, [r3, #20]
   d4284:	9301      	str	r3, [sp, #4]
   d4286:	bd08      	pop	{r3, pc}
   d4288:	00030218 	.word	0x00030218

000d428c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d428c:	b508      	push	{r3, lr}
   d428e:	4b02      	ldr	r3, [pc, #8]	; (d4298 <os_mutex_recursive_create+0xc>)
   d4290:	681b      	ldr	r3, [r3, #0]
   d4292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4294:	9301      	str	r3, [sp, #4]
   d4296:	bd08      	pop	{r3, pc}
   d4298:	00030248 	.word	0x00030248

000d429c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d429c:	b508      	push	{r3, lr}
   d429e:	4b02      	ldr	r3, [pc, #8]	; (d42a8 <os_mutex_recursive_destroy+0xc>)
   d42a0:	681b      	ldr	r3, [r3, #0]
   d42a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d42a4:	9301      	str	r3, [sp, #4]
   d42a6:	bd08      	pop	{r3, pc}
   d42a8:	00030248 	.word	0x00030248

000d42ac <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d42ac:	b508      	push	{r3, lr}
   d42ae:	4b02      	ldr	r3, [pc, #8]	; (d42b8 <inet_inet_ntop+0xc>)
   d42b0:	681b      	ldr	r3, [r3, #0]
   d42b2:	695b      	ldr	r3, [r3, #20]
   d42b4:	9301      	str	r3, [sp, #4]
   d42b6:	bd08      	pop	{r3, pc}
   d42b8:	00030264 	.word	0x00030264

000d42bc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d42bc:	b508      	push	{r3, lr}
   d42be:	4b02      	ldr	r3, [pc, #8]	; (d42c8 <hal_usart_init+0xc>)
   d42c0:	681b      	ldr	r3, [r3, #0]
   d42c2:	681b      	ldr	r3, [r3, #0]
   d42c4:	9301      	str	r3, [sp, #4]
   d42c6:	bd08      	pop	{r3, pc}
   d42c8:	0003023c 	.word	0x0003023c

000d42cc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d42cc:	b508      	push	{r3, lr}
   d42ce:	4b02      	ldr	r3, [pc, #8]	; (d42d8 <hal_usart_write+0xc>)
   d42d0:	681b      	ldr	r3, [r3, #0]
   d42d2:	68db      	ldr	r3, [r3, #12]
   d42d4:	9301      	str	r3, [sp, #4]
   d42d6:	bd08      	pop	{r3, pc}
   d42d8:	0003023c 	.word	0x0003023c

000d42dc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <hal_usart_available+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	691b      	ldr	r3, [r3, #16]
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	0003023c 	.word	0x0003023c

000d42ec <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <hal_usart_read+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	695b      	ldr	r3, [r3, #20]
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	0003023c 	.word	0x0003023c

000d42fc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b02      	ldr	r3, [pc, #8]	; (d4308 <hal_usart_peek+0xc>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	699b      	ldr	r3, [r3, #24]
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	bd08      	pop	{r3, pc}
   d4308:	0003023c 	.word	0x0003023c

000d430c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b02      	ldr	r3, [pc, #8]	; (d4318 <hal_usart_flush+0xc>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	69db      	ldr	r3, [r3, #28]
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	bd08      	pop	{r3, pc}
   d4318:	0003023c 	.word	0x0003023c

000d431c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <hal_usart_is_enabled+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	6a1b      	ldr	r3, [r3, #32]
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	0003023c 	.word	0x0003023c

000d432c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <hal_usart_available_data_for_write+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	0003023c 	.word	0x0003023c

000d433c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <hal_i2c_write+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	6a1b      	ldr	r3, [r3, #32]
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	00030228 	.word	0x00030228

000d434c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <hal_i2c_available+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	00030228 	.word	0x00030228

000d435c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <hal_i2c_read+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	00030228 	.word	0x00030228

000d436c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <hal_i2c_peek+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	00030228 	.word	0x00030228

000d437c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <hal_i2c_flush+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	00030228 	.word	0x00030228

000d438c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <hal_i2c_is_enabled+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	00030228 	.word	0x00030228

000d439c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <hal_i2c_init+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	00030228 	.word	0x00030228

000d43ac <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <hal_spi_init+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	69db      	ldr	r3, [r3, #28]
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	00030230 	.word	0x00030230

000d43bc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <hal_spi_is_enabled+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	6a1b      	ldr	r3, [r3, #32]
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	00030230 	.word	0x00030230

000d43cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <HAL_USB_USART_Init+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	681b      	ldr	r3, [r3, #0]
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	0003024c 	.word	0x0003024c

000d43dc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <HAL_USB_USART_Available_Data+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	691b      	ldr	r3, [r3, #16]
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	0003024c 	.word	0x0003024c

000d43ec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	695b      	ldr	r3, [r3, #20]
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	0003024c 	.word	0x0003024c

000d43fc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b02      	ldr	r3, [pc, #8]	; (d4408 <HAL_USB_USART_Receive_Data+0xc>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	699b      	ldr	r3, [r3, #24]
   d4404:	9301      	str	r3, [sp, #4]
   d4406:	bd08      	pop	{r3, pc}
   d4408:	0003024c 	.word	0x0003024c

000d440c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d440c:	b508      	push	{r3, lr}
   d440e:	4b02      	ldr	r3, [pc, #8]	; (d4418 <HAL_USB_USART_Send_Data+0xc>)
   d4410:	681b      	ldr	r3, [r3, #0]
   d4412:	69db      	ldr	r3, [r3, #28]
   d4414:	9301      	str	r3, [sp, #4]
   d4416:	bd08      	pop	{r3, pc}
   d4418:	0003024c 	.word	0x0003024c

000d441c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <HAL_USB_USART_Flush_Data+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	6a1b      	ldr	r3, [r3, #32]
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	0003024c 	.word	0x0003024c

000d442c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <set_system_mode+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	685b      	ldr	r3, [r3, #4]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	00030220 	.word	0x00030220

000d443c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <system_delay_ms+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	695b      	ldr	r3, [r3, #20]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	00030220 	.word	0x00030220

000d444c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <system_thread_set_state+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	00030220 	.word	0x00030220

000d445c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b03      	ldr	r3, [pc, #12]	; (d446c <system_ctrl_set_app_request_handler+0x10>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4466:	9301      	str	r3, [sp, #4]
   d4468:	bd08      	pop	{r3, pc}
   d446a:	0000      	.short	0x0000
   d446c:	00030220 	.word	0x00030220

000d4470 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b03      	ldr	r3, [pc, #12]	; (d4480 <system_ctrl_set_result+0x10>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d447a:	9301      	str	r3, [sp, #4]
   d447c:	bd08      	pop	{r3, pc}
   d447e:	0000      	.short	0x0000
   d4480:	00030220 	.word	0x00030220

000d4484 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <network_connect+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	685b      	ldr	r3, [r3, #4]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030240 	.word	0x00030240

000d4494 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <network_connecting+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	689b      	ldr	r3, [r3, #8]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030240 	.word	0x00030240

000d44a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <network_disconnect+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	68db      	ldr	r3, [r3, #12]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030240 	.word	0x00030240

000d44b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <network_ready+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	691b      	ldr	r3, [r3, #16]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030240 	.word	0x00030240

000d44c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <network_on+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	695b      	ldr	r3, [r3, #20]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030240 	.word	0x00030240

000d44d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <network_off+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	699b      	ldr	r3, [r3, #24]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030240 	.word	0x00030240

000d44e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <network_listen+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	69db      	ldr	r3, [r3, #28]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030240 	.word	0x00030240

000d44f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <network_listening+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6a1b      	ldr	r3, [r3, #32]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030240 	.word	0x00030240

000d4504 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <network_set_listen_timeout+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030240 	.word	0x00030240

000d4514 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <network_get_listen_timeout+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030240 	.word	0x00030240

000d4524 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <network_is_on+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030240 	.word	0x00030240

000d4534 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <network_is_off+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030240 	.word	0x00030240

000d4544 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030244 	.word	0x00030244

000d4554 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <malloc+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	681b      	ldr	r3, [r3, #0]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	0003021c 	.word	0x0003021c

000d4564 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <free+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	685b      	ldr	r3, [r3, #4]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	0003021c 	.word	0x0003021c

000d4574 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <newlib_impure_ptr_callback+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	0003021c 	.word	0x0003021c

000d4584 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4584:	2200      	movs	r2, #0
   d4586:	6840      	ldr	r0, [r0, #4]
   d4588:	4611      	mov	r1, r2
   d458a:	f7ff bfb3 	b.w	d44f4 <network_listening>

000d458e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d458e:	2200      	movs	r2, #0
   d4590:	6840      	ldr	r0, [r0, #4]
   d4592:	4611      	mov	r1, r2
   d4594:	f7ff bfbe 	b.w	d4514 <network_get_listen_timeout>

000d4598 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4598:	6840      	ldr	r0, [r0, #4]
   d459a:	2200      	movs	r2, #0
   d459c:	f7ff bfb2 	b.w	d4504 <network_set_listen_timeout>

000d45a0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d45a0:	6840      	ldr	r0, [r0, #4]
   d45a2:	2200      	movs	r2, #0
   d45a4:	f081 0101 	eor.w	r1, r1, #1
   d45a8:	f7ff bf9c 	b.w	d44e4 <network_listen>

000d45ac <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d45ac:	2300      	movs	r3, #0
   d45ae:	6840      	ldr	r0, [r0, #4]
   d45b0:	461a      	mov	r2, r3
   d45b2:	4619      	mov	r1, r3
   d45b4:	f7ff bf8e 	b.w	d44d4 <network_off>

000d45b8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d45b8:	2300      	movs	r3, #0
   d45ba:	6840      	ldr	r0, [r0, #4]
   d45bc:	461a      	mov	r2, r3
   d45be:	4619      	mov	r1, r3
   d45c0:	f7ff bf80 	b.w	d44c4 <network_on>

000d45c4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d45c4:	2200      	movs	r2, #0
   d45c6:	6840      	ldr	r0, [r0, #4]
   d45c8:	4611      	mov	r1, r2
   d45ca:	f7ff bf73 	b.w	d44b4 <network_ready>

000d45ce <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d45ce:	2200      	movs	r2, #0
   d45d0:	6840      	ldr	r0, [r0, #4]
   d45d2:	4611      	mov	r1, r2
   d45d4:	f7ff bf5e 	b.w	d4494 <network_connecting>

000d45d8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d45d8:	6840      	ldr	r0, [r0, #4]
   d45da:	2200      	movs	r2, #0
   d45dc:	2102      	movs	r1, #2
   d45de:	f7ff bf61 	b.w	d44a4 <network_disconnect>

000d45e2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d45e2:	2300      	movs	r3, #0
   d45e4:	6840      	ldr	r0, [r0, #4]
   d45e6:	461a      	mov	r2, r3
   d45e8:	f7ff bf4c 	b.w	d4484 <network_connect>

000d45ec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d45ec:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d45ee:	2203      	movs	r2, #3
   d45f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d45f2:	4a02      	ldr	r2, [pc, #8]	; (d45fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d45f4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d45f6:	4770      	bx	lr
   d45f8:	2003e644 	.word	0x2003e644
   d45fc:	000d5038 	.word	0x000d5038

000d4600 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4600:	b510      	push	{r4, lr}
   d4602:	4604      	mov	r4, r0
   d4604:	4608      	mov	r0, r1
{
    _spi = spi;
   d4606:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4608:	f7ff fed0 	bl	d43ac <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d460c:	2300      	movs	r3, #0
   d460e:	6063      	str	r3, [r4, #4]
}
   d4610:	4620      	mov	r0, r4
   d4612:	bd10      	pop	{r4, pc}

000d4614 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4614:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4616:	4b09      	ldr	r3, [pc, #36]	; (d463c <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4618:	4c09      	ldr	r4, [pc, #36]	; (d4640 <_GLOBAL__sub_I_System+0x2c>)
   d461a:	2202      	movs	r2, #2
   d461c:	2000      	movs	r0, #0
   d461e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4620:	4b08      	ldr	r3, [pc, #32]	; (d4644 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4622:	6020      	str	r0, [r4, #0]
   d4624:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4626:	71a0      	strb	r0, [r4, #6]
   d4628:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d462a:	f7ff feff 	bl	d442c <set_system_mode>
SystemClass System;
   d462e:	4620      	mov	r0, r4
   d4630:	4a05      	ldr	r2, [pc, #20]	; (d4648 <_GLOBAL__sub_I_System+0x34>)
   d4632:	4906      	ldr	r1, [pc, #24]	; (d464c <_GLOBAL__sub_I_System+0x38>)
   d4634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4638:	f000 bc96 	b.w	d4f68 <__aeabi_atexit>
   d463c:	2003e658 	.word	0x2003e658
   d4640:	2003e64c 	.word	0x2003e64c
   d4644:	ffff0000 	.word	0xffff0000
   d4648:	2003e634 	.word	0x2003e634
   d464c:	000d40ab 	.word	0x000d40ab

000d4650 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4650:	b510      	push	{r4, lr}
   d4652:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4654:	6800      	ldr	r0, [r0, #0]
   d4656:	b108      	cbz	r0, d465c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4658:	f7ff fe20 	bl	d429c <os_mutex_recursive_destroy>
    }
   d465c:	4620      	mov	r0, r4
   d465e:	bd10      	pop	{r4, pc}

000d4660 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4660:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4662:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4664:	4604      	mov	r4, r0
      if (_M_manager)
   d4666:	b113      	cbz	r3, d466e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4668:	2203      	movs	r2, #3
   d466a:	4601      	mov	r1, r0
   d466c:	4798      	blx	r3
    }
   d466e:	4620      	mov	r0, r4
   d4670:	bd10      	pop	{r4, pc}
	...

000d4674 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d4674:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4676:	4c06      	ldr	r4, [pc, #24]	; (d4690 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4678:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d467a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d467c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d467e:	f7ff fe05 	bl	d428c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4682:	4620      	mov	r0, r4
   d4684:	4a03      	ldr	r2, [pc, #12]	; (d4694 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4686:	4904      	ldr	r1, [pc, #16]	; (d4698 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d468c:	f000 bc6c 	b.w	d4f68 <__aeabi_atexit>
   d4690:	2003e65c 	.word	0x2003e65c
   d4694:	2003e634 	.word	0x2003e634
   d4698:	000d4651 	.word	0x000d4651

000d469c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d469e:	4606      	mov	r6, r0
   d46a0:	460d      	mov	r5, r1
  size_t n = 0;
   d46a2:	188f      	adds	r7, r1, r2
   d46a4:	2400      	movs	r4, #0
  while (size--) {
   d46a6:	42bd      	cmp	r5, r7
   d46a8:	d00c      	beq.n	d46c4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d46aa:	6833      	ldr	r3, [r6, #0]
   d46ac:	f815 1b01 	ldrb.w	r1, [r5], #1
   d46b0:	689b      	ldr	r3, [r3, #8]
   d46b2:	4630      	mov	r0, r6
   d46b4:	4798      	blx	r3
     if (chunk>=0)
   d46b6:	1e03      	subs	r3, r0, #0
   d46b8:	db01      	blt.n	d46be <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d46ba:	441c      	add	r4, r3
  while (size--) {
   d46bc:	e7f3      	b.n	d46a6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d46be:	2c00      	cmp	r4, #0
   d46c0:	bf08      	it	eq
   d46c2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d46c4:	4620      	mov	r0, r4
   d46c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d46c8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d46c8:	b513      	push	{r0, r1, r4, lr}
   d46ca:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d46cc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d46ce:	b159      	cbz	r1, d46e8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d46d0:	9101      	str	r1, [sp, #4]
   d46d2:	f000 fc9b 	bl	d500c <strlen>
   d46d6:	6823      	ldr	r3, [r4, #0]
   d46d8:	9901      	ldr	r1, [sp, #4]
   d46da:	68db      	ldr	r3, [r3, #12]
   d46dc:	4602      	mov	r2, r0
   d46de:	4620      	mov	r0, r4
    }
   d46e0:	b002      	add	sp, #8
   d46e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d46e6:	4718      	bx	r3
    }
   d46e8:	b002      	add	sp, #8
   d46ea:	bd10      	pop	{r4, pc}

000d46ec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d46ec:	6803      	ldr	r3, [r0, #0]
   d46ee:	689b      	ldr	r3, [r3, #8]
   d46f0:	4718      	bx	r3

000d46f2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d46f2:	b530      	push	{r4, r5, lr}
   d46f4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d46f6:	2300      	movs	r3, #0
   d46f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d46fc:	2a01      	cmp	r2, #1
   d46fe:	bf98      	it	ls
   d4700:	220a      	movls	r2, #10
   d4702:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4704:	460d      	mov	r5, r1
   d4706:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d470a:	fb01 5312 	mls	r3, r1, r2, r5
   d470e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4712:	2b09      	cmp	r3, #9
   d4714:	bf94      	ite	ls
   d4716:	3330      	addls	r3, #48	; 0x30
   d4718:	3337      	addhi	r3, #55	; 0x37
   d471a:	b2db      	uxtb	r3, r3
  } while(n);
   d471c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d471e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4722:	d9ef      	bls.n	d4704 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4724:	4621      	mov	r1, r4
   d4726:	f7ff ffcf 	bl	d46c8 <_ZN5Print5writeEPKc>
}
   d472a:	b00b      	add	sp, #44	; 0x2c
   d472c:	bd30      	pop	{r4, r5, pc}

000d472e <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d472e:	2300      	movs	r3, #0
   d4730:	6840      	ldr	r0, [r0, #4]
   d4732:	461a      	mov	r2, r3
   d4734:	4619      	mov	r1, r3
   d4736:	f7ff bec5 	b.w	d44c4 <network_on>
	...

000d473c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d473c:	4b01      	ldr	r3, [pc, #4]	; (d4744 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d473e:	4a02      	ldr	r2, [pc, #8]	; (d4748 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4740:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4742:	4770      	bx	lr
   d4744:	2003e660 	.word	0x2003e660
   d4748:	000d506c 	.word	0x000d506c

000d474c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d474c:	4b02      	ldr	r3, [pc, #8]	; (d4758 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d474e:	681a      	ldr	r2, [r3, #0]
   d4750:	4b02      	ldr	r3, [pc, #8]	; (d475c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4752:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4754:	4770      	bx	lr
   d4756:	bf00      	nop
   d4758:	2003e5cc 	.word	0x2003e5cc
   d475c:	2003e664 	.word	0x2003e664

000d4760 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4760:	2100      	movs	r1, #0
   d4762:	f7ff be6b 	b.w	d443c <system_delay_ms>

000d4766 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4766:	b510      	push	{r4, lr}
   d4768:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d476a:	f7ff ff79 	bl	d4660 <_ZNSt14_Function_baseD1Ev>
   d476e:	4620      	mov	r0, r4
   d4770:	bd10      	pop	{r4, pc}
	...

000d4774 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4774:	4803      	ldr	r0, [pc, #12]	; (d4784 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4776:	4a04      	ldr	r2, [pc, #16]	; (d4788 <_GLOBAL__sub_I_RGB+0x14>)
   d4778:	4904      	ldr	r1, [pc, #16]	; (d478c <_GLOBAL__sub_I_RGB+0x18>)
   d477a:	2300      	movs	r3, #0
   d477c:	6083      	str	r3, [r0, #8]
   d477e:	f000 bbf3 	b.w	d4f68 <__aeabi_atexit>
   d4782:	bf00      	nop
   d4784:	2003e668 	.word	0x2003e668
   d4788:	2003e634 	.word	0x2003e634
   d478c:	000d4767 	.word	0x000d4767

000d4790 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4790:	4b01      	ldr	r3, [pc, #4]	; (d4798 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4792:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4794:	4770      	bx	lr
   d4796:	bf00      	nop
   d4798:	2003e5d0 	.word	0x2003e5d0

000d479c <serialEventRun>:
{
   d479c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d479e:	4b0b      	ldr	r3, [pc, #44]	; (d47cc <serialEventRun+0x30>)
   d47a0:	b143      	cbz	r3, d47b4 <serialEventRun+0x18>
   d47a2:	f000 f957 	bl	d4a54 <_Z16_fetch_usbserialv>
   d47a6:	6803      	ldr	r3, [r0, #0]
   d47a8:	691b      	ldr	r3, [r3, #16]
   d47aa:	4798      	blx	r3
   d47ac:	2800      	cmp	r0, #0
   d47ae:	dd01      	ble.n	d47b4 <serialEventRun+0x18>
        serialEvent();
   d47b0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d47b4:	4b06      	ldr	r3, [pc, #24]	; (d47d0 <serialEventRun+0x34>)
   d47b6:	b143      	cbz	r3, d47ca <serialEventRun+0x2e>
   d47b8:	f000 f9ca 	bl	d4b50 <_Z22__fetch_global_Serial1v>
   d47bc:	6803      	ldr	r3, [r0, #0]
   d47be:	691b      	ldr	r3, [r3, #16]
   d47c0:	4798      	blx	r3
   d47c2:	2800      	cmp	r0, #0
   d47c4:	dd01      	ble.n	d47ca <serialEventRun+0x2e>
        serialEvent1();
   d47c6:	f3af 8000 	nop.w
}
   d47ca:	bd08      	pop	{r3, pc}
	...

000d47d4 <_post_loop>:
{
   d47d4:	b508      	push	{r3, lr}
	serialEventRun();
   d47d6:	f7ff ffe1 	bl	d479c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d47da:	f7ff fd4f 	bl	d427c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d47de:	4b01      	ldr	r3, [pc, #4]	; (d47e4 <_post_loop+0x10>)
   d47e0:	6018      	str	r0, [r3, #0]
}
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	2003e7d4 	.word	0x2003e7d4

000d47e8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d47e8:	4802      	ldr	r0, [pc, #8]	; (d47f4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d47ea:	4a03      	ldr	r2, [pc, #12]	; (d47f8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d47ec:	4903      	ldr	r1, [pc, #12]	; (d47fc <_Z33system_initialize_user_backup_ramv+0x14>)
   d47ee:	1a12      	subs	r2, r2, r0
   d47f0:	f000 bbd2 	b.w	d4f98 <memcpy>
   d47f4:	2003f400 	.word	0x2003f400
   d47f8:	2003f404 	.word	0x2003f404
   d47fc:	000d51d0 	.word	0x000d51d0

000d4800 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4800:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4802:	2300      	movs	r3, #0
   d4804:	9300      	str	r3, [sp, #0]
   d4806:	461a      	mov	r2, r3
   d4808:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d480c:	f7ff fe30 	bl	d4470 <system_ctrl_set_result>
}
   d4810:	b003      	add	sp, #12
   d4812:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4818 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4818:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d481a:	8843      	ldrh	r3, [r0, #2]
   d481c:	2b0a      	cmp	r3, #10
   d481e:	d008      	beq.n	d4832 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4820:	2b50      	cmp	r3, #80	; 0x50
   d4822:	d10b      	bne.n	d483c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4824:	4b09      	ldr	r3, [pc, #36]	; (d484c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4826:	681b      	ldr	r3, [r3, #0]
   d4828:	b14b      	cbz	r3, d483e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d482a:	b003      	add	sp, #12
   d482c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4830:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4832:	f7ff ffe5 	bl	d4800 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4836:	b003      	add	sp, #12
   d4838:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d483c:	2300      	movs	r3, #0
   d483e:	9300      	str	r3, [sp, #0]
   d4840:	461a      	mov	r2, r3
   d4842:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4846:	f7ff fe13 	bl	d4470 <system_ctrl_set_result>
}
   d484a:	e7f4      	b.n	d4836 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d484c:	2003e67c 	.word	0x2003e67c

000d4850 <module_user_init_hook>:
{
   d4850:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4852:	4c12      	ldr	r4, [pc, #72]	; (d489c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4854:	4812      	ldr	r0, [pc, #72]	; (d48a0 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4856:	4d13      	ldr	r5, [pc, #76]	; (d48a4 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4858:	2100      	movs	r1, #0
   d485a:	f7ff fe8b 	bl	d4574 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d485e:	6823      	ldr	r3, [r4, #0]
   d4860:	42ab      	cmp	r3, r5
   d4862:	4b11      	ldr	r3, [pc, #68]	; (d48a8 <module_user_init_hook+0x58>)
   d4864:	bf0c      	ite	eq
   d4866:	2201      	moveq	r2, #1
   d4868:	2200      	movne	r2, #0
   d486a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d486c:	d002      	beq.n	d4874 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d486e:	f7ff ffbb 	bl	d47e8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4872:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4874:	f7ff fcfa 	bl	d426c <HAL_RNG_GetRandomNumber>
   d4878:	4604      	mov	r4, r0
    srand(seed);
   d487a:	f000 fba3 	bl	d4fc4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d487e:	4b0b      	ldr	r3, [pc, #44]	; (d48ac <module_user_init_hook+0x5c>)
   d4880:	b113      	cbz	r3, d4888 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4882:	4620      	mov	r0, r4
   d4884:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4888:	2100      	movs	r1, #0
   d488a:	4808      	ldr	r0, [pc, #32]	; (d48ac <module_user_init_hook+0x5c>)
   d488c:	f7ff fe5a 	bl	d4544 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4890:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4894:	4806      	ldr	r0, [pc, #24]	; (d48b0 <module_user_init_hook+0x60>)
   d4896:	2100      	movs	r1, #0
   d4898:	f7ff bde0 	b.w	d445c <system_ctrl_set_app_request_handler>
   d489c:	2003f400 	.word	0x2003f400
   d48a0:	000d4791 	.word	0x000d4791
   d48a4:	9a271c1e 	.word	0x9a271c1e
   d48a8:	2003e678 	.word	0x2003e678
   d48ac:	00000000 	.word	0x00000000
   d48b0:	000d4819 	.word	0x000d4819

000d48b4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d48b4:	4770      	bx	lr

000d48b6 <_ZN9IPAddressD0Ev>:
   d48b6:	b510      	push	{r4, lr}
   d48b8:	2118      	movs	r1, #24
   d48ba:	4604      	mov	r4, r0
   d48bc:	f000 fb59 	bl	d4f72 <_ZdlPvj>
   d48c0:	4620      	mov	r0, r4
   d48c2:	bd10      	pop	{r4, pc}

000d48c4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d48c4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d48c6:	7d03      	ldrb	r3, [r0, #20]
   d48c8:	2b06      	cmp	r3, #6
{
   d48ca:	b08d      	sub	sp, #52	; 0x34
   d48cc:	460e      	mov	r6, r1
   d48ce:	f100 0704 	add.w	r7, r0, #4
   d48d2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d48d6:	d012      	beq.n	d48fe <_ZNK9IPAddress7printToER5Print+0x3a>
   d48d8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d48dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d48e0:	220a      	movs	r2, #10
   d48e2:	4630      	mov	r0, r6
   d48e4:	f7ff ff05 	bl	d46f2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d48e8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d48ea:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d48ec:	d019      	beq.n	d4922 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d48ee:	2c00      	cmp	r4, #0
   d48f0:	d0f4      	beq.n	d48dc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d48f2:	212e      	movs	r1, #46	; 0x2e
   d48f4:	4630      	mov	r0, r6
   d48f6:	f7ff fef9 	bl	d46ec <_ZN5Print5printEc>
   d48fa:	4404      	add	r4, r0
   d48fc:	e7ee      	b.n	d48dc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d48fe:	232f      	movs	r3, #47	; 0x2f
   d4900:	466a      	mov	r2, sp
   d4902:	4639      	mov	r1, r7
   d4904:	200a      	movs	r0, #10
		buf[0] = 0;
   d4906:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d490a:	f7ff fccf 	bl	d42ac <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d490e:	4668      	mov	r0, sp
   d4910:	f000 fb7c 	bl	d500c <strlen>
   d4914:	6833      	ldr	r3, [r6, #0]
   d4916:	4602      	mov	r2, r0
   d4918:	68db      	ldr	r3, [r3, #12]
   d491a:	4669      	mov	r1, sp
   d491c:	4630      	mov	r0, r6
   d491e:	4798      	blx	r3
   d4920:	4604      	mov	r4, r0
    }
    return n;
}
   d4922:	4620      	mov	r0, r4
   d4924:	b00d      	add	sp, #52	; 0x34
   d4926:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4928 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4928:	b510      	push	{r4, lr}
   d492a:	4b05      	ldr	r3, [pc, #20]	; (d4940 <_ZN9IPAddressC1Ev+0x18>)
   d492c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d492e:	2211      	movs	r2, #17
   d4930:	f840 3b04 	str.w	r3, [r0], #4
   d4934:	2100      	movs	r1, #0
   d4936:	f000 fb3d 	bl	d4fb4 <memset>
}
   d493a:	4620      	mov	r0, r4
   d493c:	bd10      	pop	{r4, pc}
   d493e:	bf00      	nop
   d4940:	000d5094 	.word	0x000d5094

000d4944 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4944:	4603      	mov	r3, r0
   d4946:	4a07      	ldr	r2, [pc, #28]	; (d4964 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4948:	b510      	push	{r4, lr}
   d494a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d494e:	f101 0210 	add.w	r2, r1, #16
   d4952:	f851 4b04 	ldr.w	r4, [r1], #4
   d4956:	f843 4b04 	str.w	r4, [r3], #4
   d495a:	4291      	cmp	r1, r2
   d495c:	d1f9      	bne.n	d4952 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d495e:	780a      	ldrb	r2, [r1, #0]
   d4960:	701a      	strb	r2, [r3, #0]
}
   d4962:	bd10      	pop	{r4, pc}
   d4964:	000d5094 	.word	0x000d5094

000d4968 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4968:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d496a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d496e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4972:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4976:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d497a:	2304      	movs	r3, #4
   d497c:	6041      	str	r1, [r0, #4]
   d497e:	7503      	strb	r3, [r0, #20]
}
   d4980:	bd10      	pop	{r4, pc}
	...

000d4984 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d4984:	b513      	push	{r0, r1, r4, lr}
   d4986:	4b05      	ldr	r3, [pc, #20]	; (d499c <_ZN9IPAddressC1EPKh+0x18>)
   d4988:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d498a:	78cb      	ldrb	r3, [r1, #3]
   d498c:	9300      	str	r3, [sp, #0]
   d498e:	788b      	ldrb	r3, [r1, #2]
   d4990:	784a      	ldrb	r2, [r1, #1]
   d4992:	7809      	ldrb	r1, [r1, #0]
   d4994:	f7ff ffe8 	bl	d4968 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4998:	b002      	add	sp, #8
   d499a:	bd10      	pop	{r4, pc}
   d499c:	000d5094 	.word	0x000d5094

000d49a0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d49a0:	7441      	strb	r1, [r0, #17]
}
   d49a2:	4770      	bx	lr

000d49a4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d49a4:	4770      	bx	lr

000d49a6 <_ZN9USBSerial4readEv>:
{
   d49a6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d49a8:	2100      	movs	r1, #0
   d49aa:	7c00      	ldrb	r0, [r0, #16]
   d49ac:	f7ff fd26 	bl	d43fc <HAL_USB_USART_Receive_Data>
}
   d49b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d49b4:	bd08      	pop	{r3, pc}

000d49b6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d49b6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d49b8:	2101      	movs	r1, #1
   d49ba:	7c00      	ldrb	r0, [r0, #16]
   d49bc:	f7ff fd1e 	bl	d43fc <HAL_USB_USART_Receive_Data>
}
   d49c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d49c4:	bd08      	pop	{r3, pc}

000d49c6 <_ZN9USBSerial17availableForWriteEv>:
{
   d49c6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d49c8:	7c00      	ldrb	r0, [r0, #16]
   d49ca:	f7ff fd0f 	bl	d43ec <HAL_USB_USART_Available_Data_For_Write>
}
   d49ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d49d2:	bd08      	pop	{r3, pc}

000d49d4 <_ZN9USBSerial9availableEv>:
{
   d49d4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d49d6:	7c00      	ldrb	r0, [r0, #16]
   d49d8:	f7ff fd00 	bl	d43dc <HAL_USB_USART_Available_Data>
}
   d49dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d49e0:	bd08      	pop	{r3, pc}

000d49e2 <_ZN9USBSerial5writeEh>:
{
   d49e2:	b513      	push	{r0, r1, r4, lr}
   d49e4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d49e6:	7c00      	ldrb	r0, [r0, #16]
{
   d49e8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d49ea:	f7ff fcff 	bl	d43ec <HAL_USB_USART_Available_Data_For_Write>
   d49ee:	2800      	cmp	r0, #0
   d49f0:	9901      	ldr	r1, [sp, #4]
   d49f2:	dc01      	bgt.n	d49f8 <_ZN9USBSerial5writeEh+0x16>
   d49f4:	7c60      	ldrb	r0, [r4, #17]
   d49f6:	b120      	cbz	r0, d4a02 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d49f8:	7c20      	ldrb	r0, [r4, #16]
   d49fa:	f7ff fd07 	bl	d440c <HAL_USB_USART_Send_Data>
   d49fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d4a02:	b002      	add	sp, #8
   d4a04:	bd10      	pop	{r4, pc}

000d4a06 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d4a06:	7c00      	ldrb	r0, [r0, #16]
   d4a08:	f7ff bd08 	b.w	d441c <HAL_USB_USART_Flush_Data>

000d4a0c <_ZN9USBSerialD0Ev>:
   d4a0c:	b510      	push	{r4, lr}
   d4a0e:	2114      	movs	r1, #20
   d4a10:	4604      	mov	r4, r0
   d4a12:	f000 faae 	bl	d4f72 <_ZdlPvj>
   d4a16:	4620      	mov	r0, r4
   d4a18:	bd10      	pop	{r4, pc}
	...

000d4a1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4a1c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4a22:	4604      	mov	r4, r0
   d4a24:	4608      	mov	r0, r1
   d4a26:	2100      	movs	r1, #0
   d4a28:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4a2c:	4b04      	ldr	r3, [pc, #16]	; (d4a40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4a2e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d4a30:	2301      	movs	r3, #1
  _serial = serial;
   d4a32:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4a34:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d4a36:	4611      	mov	r1, r2
   d4a38:	f7ff fcc8 	bl	d43cc <HAL_USB_USART_Init>
}
   d4a3c:	4620      	mov	r0, r4
   d4a3e:	bd10      	pop	{r4, pc}
   d4a40:	000d50a8 	.word	0x000d50a8

000d4a44 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4a44:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4a46:	2214      	movs	r2, #20
{
   d4a48:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4a4a:	2100      	movs	r1, #0
   d4a4c:	f000 fab2 	bl	d4fb4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4a50:	4620      	mov	r0, r4
   d4a52:	bd10      	pop	{r4, pc}

000d4a54 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4a54:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a56:	4c10      	ldr	r4, [pc, #64]	; (d4a98 <_Z16_fetch_usbserialv+0x44>)
{
   d4a58:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4a5a:	a803      	add	r0, sp, #12
   d4a5c:	f7ff fff2 	bl	d4a44 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a60:	7821      	ldrb	r1, [r4, #0]
   d4a62:	f3bf 8f5b 	dmb	ish
   d4a66:	f011 0101 	ands.w	r1, r1, #1
   d4a6a:	d111      	bne.n	d4a90 <_Z16_fetch_usbserialv+0x3c>
   d4a6c:	4620      	mov	r0, r4
   d4a6e:	9101      	str	r1, [sp, #4]
   d4a70:	f7ff fb13 	bl	d409a <__cxa_guard_acquire>
   d4a74:	9901      	ldr	r1, [sp, #4]
   d4a76:	b158      	cbz	r0, d4a90 <_Z16_fetch_usbserialv+0x3c>
   d4a78:	aa03      	add	r2, sp, #12
   d4a7a:	4808      	ldr	r0, [pc, #32]	; (d4a9c <_Z16_fetch_usbserialv+0x48>)
   d4a7c:	f7ff ffce 	bl	d4a1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4a80:	4620      	mov	r0, r4
   d4a82:	f7ff fb0f 	bl	d40a4 <__cxa_guard_release>
   d4a86:	4a06      	ldr	r2, [pc, #24]	; (d4aa0 <_Z16_fetch_usbserialv+0x4c>)
   d4a88:	4906      	ldr	r1, [pc, #24]	; (d4aa4 <_Z16_fetch_usbserialv+0x50>)
   d4a8a:	4804      	ldr	r0, [pc, #16]	; (d4a9c <_Z16_fetch_usbserialv+0x48>)
   d4a8c:	f000 fa6c 	bl	d4f68 <__aeabi_atexit>
	return _usbserial;
}
   d4a90:	4802      	ldr	r0, [pc, #8]	; (d4a9c <_Z16_fetch_usbserialv+0x48>)
   d4a92:	b008      	add	sp, #32
   d4a94:	bd10      	pop	{r4, pc}
   d4a96:	bf00      	nop
   d4a98:	2003e680 	.word	0x2003e680
   d4a9c:	2003e684 	.word	0x2003e684
   d4aa0:	2003e634 	.word	0x2003e634
   d4aa4:	000d49a5 	.word	0x000d49a5

000d4aa8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d4aa8:	4770      	bx	lr

000d4aaa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4aaa:	7441      	strb	r1, [r0, #17]
}
   d4aac:	4770      	bx	lr

000d4aae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d4aae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d4ab0:	7c00      	ldrb	r0, [r0, #16]
   d4ab2:	f7ff fc3b 	bl	d432c <hal_usart_available_data_for_write>
}
   d4ab6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4aba:	bd08      	pop	{r3, pc}

000d4abc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4abc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d4abe:	7c00      	ldrb	r0, [r0, #16]
   d4ac0:	f7ff fc0c 	bl	d42dc <hal_usart_available>
}
   d4ac4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4ac8:	bd08      	pop	{r3, pc}

000d4aca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4aca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d4acc:	7c00      	ldrb	r0, [r0, #16]
   d4ace:	f7ff fc15 	bl	d42fc <hal_usart_peek>
}
   d4ad2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4ad6:	bd08      	pop	{r3, pc}

000d4ad8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4ad8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d4ada:	7c00      	ldrb	r0, [r0, #16]
   d4adc:	f7ff fc06 	bl	d42ec <hal_usart_read>
}
   d4ae0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4ae4:	bd08      	pop	{r3, pc}

000d4ae6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d4ae6:	7c00      	ldrb	r0, [r0, #16]
   d4ae8:	f7ff bc10 	b.w	d430c <hal_usart_flush>

000d4aec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4aee:	7c45      	ldrb	r5, [r0, #17]
{
   d4af0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4af2:	b12d      	cbz	r5, d4b00 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d4af4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4af6:	b003      	add	sp, #12
   d4af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d4afc:	f7ff bbe6 	b.w	d42cc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4b00:	7c00      	ldrb	r0, [r0, #16]
   d4b02:	9101      	str	r1, [sp, #4]
   d4b04:	f7ff fc12 	bl	d432c <hal_usart_available_data_for_write>
   d4b08:	2800      	cmp	r0, #0
   d4b0a:	9901      	ldr	r1, [sp, #4]
   d4b0c:	dcf2      	bgt.n	d4af4 <_ZN11USARTSerial5writeEh+0x8>
}
   d4b0e:	4628      	mov	r0, r5
   d4b10:	b003      	add	sp, #12
   d4b12:	bd30      	pop	{r4, r5, pc}

000d4b14 <_ZN11USARTSerialD0Ev>:
   d4b14:	b510      	push	{r4, lr}
   d4b16:	2114      	movs	r1, #20
   d4b18:	4604      	mov	r4, r0
   d4b1a:	f000 fa2a 	bl	d4f72 <_ZdlPvj>
   d4b1e:	4620      	mov	r0, r4
   d4b20:	bd10      	pop	{r4, pc}
	...

000d4b24 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d4b24:	b510      	push	{r4, lr}
   d4b26:	f04f 0c00 	mov.w	ip, #0
   d4b2a:	4604      	mov	r4, r0
   d4b2c:	4608      	mov	r0, r1
   d4b2e:	4611      	mov	r1, r2
   d4b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4b34:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d4b38:	4a04      	ldr	r2, [pc, #16]	; (d4b4c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d4b3a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d4b3c:	2201      	movs	r2, #1
  _serial = serial;
   d4b3e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4b40:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d4b42:	461a      	mov	r2, r3
   d4b44:	f7ff fbba 	bl	d42bc <hal_usart_init>
}
   d4b48:	4620      	mov	r0, r4
   d4b4a:	bd10      	pop	{r4, pc}
   d4b4c:	000d50d8 	.word	0x000d50d8

000d4b50 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4b50:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4b52:	4c0e      	ldr	r4, [pc, #56]	; (d4b8c <_Z22__fetch_global_Serial1v+0x3c>)
   d4b54:	7821      	ldrb	r1, [r4, #0]
   d4b56:	f3bf 8f5b 	dmb	ish
   d4b5a:	f011 0101 	ands.w	r1, r1, #1
   d4b5e:	d112      	bne.n	d4b86 <_Z22__fetch_global_Serial1v+0x36>
   d4b60:	4620      	mov	r0, r4
   d4b62:	9101      	str	r1, [sp, #4]
   d4b64:	f7ff fa99 	bl	d409a <__cxa_guard_acquire>
   d4b68:	9901      	ldr	r1, [sp, #4]
   d4b6a:	b160      	cbz	r0, d4b86 <_Z22__fetch_global_Serial1v+0x36>
   d4b6c:	4a08      	ldr	r2, [pc, #32]	; (d4b90 <_Z22__fetch_global_Serial1v+0x40>)
   d4b6e:	4b09      	ldr	r3, [pc, #36]	; (d4b94 <_Z22__fetch_global_Serial1v+0x44>)
   d4b70:	4809      	ldr	r0, [pc, #36]	; (d4b98 <_Z22__fetch_global_Serial1v+0x48>)
   d4b72:	f7ff ffd7 	bl	d4b24 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d4b76:	4620      	mov	r0, r4
   d4b78:	f7ff fa94 	bl	d40a4 <__cxa_guard_release>
   d4b7c:	4a07      	ldr	r2, [pc, #28]	; (d4b9c <_Z22__fetch_global_Serial1v+0x4c>)
   d4b7e:	4908      	ldr	r1, [pc, #32]	; (d4ba0 <_Z22__fetch_global_Serial1v+0x50>)
   d4b80:	4805      	ldr	r0, [pc, #20]	; (d4b98 <_Z22__fetch_global_Serial1v+0x48>)
   d4b82:	f000 f9f1 	bl	d4f68 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4b86:	4804      	ldr	r0, [pc, #16]	; (d4b98 <_Z22__fetch_global_Serial1v+0x48>)
   d4b88:	b002      	add	sp, #8
   d4b8a:	bd10      	pop	{r4, pc}
   d4b8c:	2003e698 	.word	0x2003e698
   d4b90:	2003e69c 	.word	0x2003e69c
   d4b94:	2003e720 	.word	0x2003e720
   d4b98:	2003e7a4 	.word	0x2003e7a4
   d4b9c:	2003e634 	.word	0x2003e634
   d4ba0:	000d4aa9 	.word	0x000d4aa9

000d4ba4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4ba4:	4770      	bx	lr

000d4ba6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ba8:	4606      	mov	r6, r0
   d4baa:	4615      	mov	r5, r2
   d4bac:	460c      	mov	r4, r1
   d4bae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4bb0:	42bc      	cmp	r4, r7
   d4bb2:	d006      	beq.n	d4bc2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4bb4:	6833      	ldr	r3, [r6, #0]
   d4bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4bba:	689b      	ldr	r3, [r3, #8]
   d4bbc:	4630      	mov	r0, r6
   d4bbe:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4bc0:	e7f6      	b.n	d4bb0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4bc2:	4628      	mov	r0, r5
   d4bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4bc6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4bc6:	7c00      	ldrb	r0, [r0, #16]
   d4bc8:	2200      	movs	r2, #0
   d4bca:	f7ff bbb7 	b.w	d433c <hal_i2c_write>

000d4bce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4bce:	7c00      	ldrb	r0, [r0, #16]
   d4bd0:	2100      	movs	r1, #0
   d4bd2:	f7ff bbbb 	b.w	d434c <hal_i2c_available>

000d4bd6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4bd6:	7c00      	ldrb	r0, [r0, #16]
   d4bd8:	2100      	movs	r1, #0
   d4bda:	f7ff bbbf 	b.w	d435c <hal_i2c_read>

000d4bde <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4bde:	7c00      	ldrb	r0, [r0, #16]
   d4be0:	2100      	movs	r1, #0
   d4be2:	f7ff bbc3 	b.w	d436c <hal_i2c_peek>

000d4be6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4be6:	7c00      	ldrb	r0, [r0, #16]
   d4be8:	2100      	movs	r1, #0
   d4bea:	f7ff bbc7 	b.w	d437c <hal_i2c_flush>

000d4bee <_ZN7TwoWireD0Ev>:
   d4bee:	b510      	push	{r4, lr}
   d4bf0:	2114      	movs	r1, #20
   d4bf2:	4604      	mov	r4, r0
   d4bf4:	f000 f9bd 	bl	d4f72 <_ZdlPvj>
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	bd10      	pop	{r4, pc}

000d4bfc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4bfc:	b510      	push	{r4, lr}
   d4bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c02:	4604      	mov	r4, r0
   d4c04:	4608      	mov	r0, r1
   d4c06:	2100      	movs	r1, #0
   d4c08:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4c0c:	4b03      	ldr	r3, [pc, #12]	; (d4c1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4c0e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4c10:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4c12:	4611      	mov	r1, r2
   d4c14:	f7ff fbc2 	bl	d439c <hal_i2c_init>
}
   d4c18:	4620      	mov	r0, r4
   d4c1a:	bd10      	pop	{r4, pc}
   d4c1c:	000d5108 	.word	0x000d5108

000d4c20 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4c20:	2200      	movs	r2, #0
   d4c22:	6840      	ldr	r0, [r0, #4]
   d4c24:	4611      	mov	r1, r2
   d4c26:	f7ff bc45 	b.w	d44b4 <network_ready>

000d4c2a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4c2a:	2200      	movs	r2, #0
   d4c2c:	6840      	ldr	r0, [r0, #4]
   d4c2e:	4611      	mov	r1, r2
   d4c30:	f7ff bc60 	b.w	d44f4 <network_listening>

000d4c34 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4c34:	2200      	movs	r2, #0
   d4c36:	6840      	ldr	r0, [r0, #4]
   d4c38:	4611      	mov	r1, r2
   d4c3a:	f7ff bc6b 	b.w	d4514 <network_get_listen_timeout>

000d4c3e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4c3e:	6840      	ldr	r0, [r0, #4]
   d4c40:	2200      	movs	r2, #0
   d4c42:	f7ff bc5f 	b.w	d4504 <network_set_listen_timeout>

000d4c46 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4c46:	6840      	ldr	r0, [r0, #4]
   d4c48:	2200      	movs	r2, #0
   d4c4a:	f081 0101 	eor.w	r1, r1, #1
   d4c4e:	f7ff bc49 	b.w	d44e4 <network_listen>

000d4c52 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4c52:	2300      	movs	r3, #0
   d4c54:	6840      	ldr	r0, [r0, #4]
   d4c56:	461a      	mov	r2, r3
   d4c58:	4619      	mov	r1, r3
   d4c5a:	f7ff bc3b 	b.w	d44d4 <network_off>

000d4c5e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4c5e:	2200      	movs	r2, #0
   d4c60:	6840      	ldr	r0, [r0, #4]
   d4c62:	4611      	mov	r1, r2
   d4c64:	f7ff bc16 	b.w	d4494 <network_connecting>

000d4c68 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4c68:	6840      	ldr	r0, [r0, #4]
   d4c6a:	2200      	movs	r2, #0
   d4c6c:	2102      	movs	r1, #2
   d4c6e:	f7ff bc19 	b.w	d44a4 <network_disconnect>

000d4c72 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4c72:	2300      	movs	r3, #0
   d4c74:	6840      	ldr	r0, [r0, #4]
   d4c76:	461a      	mov	r2, r3
   d4c78:	f7ff bc04 	b.w	d4484 <network_connect>

000d4c7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4c7c:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4c7e:	2204      	movs	r2, #4
   d4c80:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4c82:	4a02      	ldr	r2, [pc, #8]	; (d4c8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4c84:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d4c86:	4770      	bx	lr
   d4c88:	2003e7b8 	.word	0x2003e7b8
   d4c8c:	000d5130 	.word	0x000d5130

000d4c90 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4c90:	2300      	movs	r3, #0
   d4c92:	6840      	ldr	r0, [r0, #4]
   d4c94:	461a      	mov	r2, r3
   d4c96:	f7ff bbf5 	b.w	d4484 <network_connect>

000d4c9a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4c9a:	6840      	ldr	r0, [r0, #4]
   d4c9c:	2200      	movs	r2, #0
   d4c9e:	2102      	movs	r1, #2
   d4ca0:	f7ff bc00 	b.w	d44a4 <network_disconnect>

000d4ca4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4ca4:	2200      	movs	r2, #0
   d4ca6:	6840      	ldr	r0, [r0, #4]
   d4ca8:	4611      	mov	r1, r2
   d4caa:	f7ff bbf3 	b.w	d4494 <network_connecting>

000d4cae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4cae:	2200      	movs	r2, #0
   d4cb0:	6840      	ldr	r0, [r0, #4]
   d4cb2:	4611      	mov	r1, r2
   d4cb4:	f7ff bbfe 	b.w	d44b4 <network_ready>

000d4cb8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4cb8:	2300      	movs	r3, #0
   d4cba:	6840      	ldr	r0, [r0, #4]
   d4cbc:	461a      	mov	r2, r3
   d4cbe:	4619      	mov	r1, r3
   d4cc0:	f7ff bc00 	b.w	d44c4 <network_on>

000d4cc4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4cc4:	2300      	movs	r3, #0
   d4cc6:	6840      	ldr	r0, [r0, #4]
   d4cc8:	461a      	mov	r2, r3
   d4cca:	4619      	mov	r1, r3
   d4ccc:	f7ff bc02 	b.w	d44d4 <network_off>

000d4cd0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4cd0:	6840      	ldr	r0, [r0, #4]
   d4cd2:	2100      	movs	r1, #0
   d4cd4:	f7ff bc26 	b.w	d4524 <network_is_on>

000d4cd8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4cd8:	6840      	ldr	r0, [r0, #4]
   d4cda:	2100      	movs	r1, #0
   d4cdc:	f7ff bc2a 	b.w	d4534 <network_is_off>

000d4ce0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4ce0:	6840      	ldr	r0, [r0, #4]
   d4ce2:	2200      	movs	r2, #0
   d4ce4:	f081 0101 	eor.w	r1, r1, #1
   d4ce8:	f7ff bbfc 	b.w	d44e4 <network_listen>

000d4cec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4cec:	6840      	ldr	r0, [r0, #4]
   d4cee:	2200      	movs	r2, #0
   d4cf0:	f7ff bc08 	b.w	d4504 <network_set_listen_timeout>

000d4cf4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4cf4:	2200      	movs	r2, #0
   d4cf6:	6840      	ldr	r0, [r0, #4]
   d4cf8:	4611      	mov	r1, r2
   d4cfa:	f7ff bc0b 	b.w	d4514 <network_get_listen_timeout>

000d4cfe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4cfe:	2200      	movs	r2, #0
   d4d00:	6840      	ldr	r0, [r0, #4]
   d4d02:	4611      	mov	r1, r2
   d4d04:	f7ff bbf6 	b.w	d44f4 <network_listening>

000d4d08 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4d0c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4d0e:	b095      	sub	sp, #84	; 0x54
   d4d10:	4616      	mov	r6, r2
   d4d12:	460d      	mov	r5, r1
   d4d14:	4607      	mov	r7, r0
    IPAddress addr;
   d4d16:	f7ff fe07 	bl	d4928 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4d1a:	4621      	mov	r1, r4
   d4d1c:	2218      	movs	r2, #24
   d4d1e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4d20:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4d22:	f000 f947 	bl	d4fb4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4d26:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4d28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4d2c:	4621      	mov	r1, r4
   d4d2e:	466b      	mov	r3, sp
   d4d30:	aa0c      	add	r2, sp, #48	; 0x30
   d4d32:	4630      	mov	r0, r6
   d4d34:	f7ff fa6a 	bl	d420c <netdb_getaddrinfo>
    if (!r) {
   d4d38:	4604      	mov	r4, r0
   d4d3a:	2800      	cmp	r0, #0
   d4d3c:	d14c      	bne.n	d4dd8 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4d3e:	4602      	mov	r2, r0
   d4d40:	2101      	movs	r1, #1
   d4d42:	6868      	ldr	r0, [r5, #4]
   d4d44:	f7ff fbb6 	bl	d44b4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d48:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4d4a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d4c:	4622      	mov	r2, r4
   d4d4e:	6868      	ldr	r0, [r5, #4]
   d4d50:	f7ff fbb0 	bl	d44b4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4d54:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4d56:	4681      	mov	r9, r0
        bool ok = false;
   d4d58:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4d5a:	2e00      	cmp	r6, #0
   d4d5c:	d03c      	beq.n	d4dd8 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d4d5e:	2900      	cmp	r1, #0
   d4d60:	d13a      	bne.n	d4dd8 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4d62:	6873      	ldr	r3, [r6, #4]
   d4d64:	2b02      	cmp	r3, #2
   d4d66:	d003      	beq.n	d4d70 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4d68:	2b0a      	cmp	r3, #10
   d4d6a:	d011      	beq.n	d4d90 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4d6c:	69f6      	ldr	r6, [r6, #28]
   d4d6e:	e7f4      	b.n	d4d5a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4d70:	f1b8 0f00 	cmp.w	r8, #0
   d4d74:	d00a      	beq.n	d4d8c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4d76:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d4d78:	a806      	add	r0, sp, #24
   d4d7a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d4d7c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d4d7e:	f7ff fe01 	bl	d4984 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d4d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4d84:	1d3c      	adds	r4, r7, #4
   d4d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4d88:	682b      	ldr	r3, [r5, #0]
   d4d8a:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d4d8c:	4641      	mov	r1, r8
   d4d8e:	e7ed      	b.n	d4d6c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4d90:	f1b9 0f00 	cmp.w	r9, #0
   d4d94:	d101      	bne.n	d4d9a <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4d96:	4649      	mov	r1, r9
   d4d98:	e7e8      	b.n	d4d6c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4d9a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4d9c:	2210      	movs	r2, #16
   d4d9e:	a801      	add	r0, sp, #4
   d4da0:	f000 f908 	bl	d4fb4 <memset>
                    a.v = 6;
   d4da4:	2306      	movs	r3, #6
   d4da6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4daa:	ad01      	add	r5, sp, #4
   d4dac:	f104 0308 	add.w	r3, r4, #8
   d4db0:	3418      	adds	r4, #24
   d4db2:	6818      	ldr	r0, [r3, #0]
   d4db4:	6859      	ldr	r1, [r3, #4]
   d4db6:	462a      	mov	r2, r5
   d4db8:	c203      	stmia	r2!, {r0, r1}
   d4dba:	3308      	adds	r3, #8
   d4dbc:	42a3      	cmp	r3, r4
   d4dbe:	4615      	mov	r5, r2
   d4dc0:	d1f7      	bne.n	d4db2 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d4dc2:	a901      	add	r1, sp, #4
   d4dc4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4dc6:	ad07      	add	r5, sp, #28
   d4dc8:	f7ff fdbc 	bl	d4944 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4dce:	1d3c      	adds	r4, r7, #4
   d4dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4dd2:	682b      	ldr	r3, [r5, #0]
   d4dd4:	7023      	strb	r3, [r4, #0]
   d4dd6:	e7de      	b.n	d4d96 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4dd8:	9800      	ldr	r0, [sp, #0]
   d4dda:	f7ff fa0f 	bl	d41fc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4dde:	4638      	mov	r0, r7
   d4de0:	b015      	add	sp, #84	; 0x54
   d4de2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4de8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4de8:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4dea:	4a03      	ldr	r2, [pc, #12]	; (d4df8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4dec:	601a      	str	r2, [r3, #0]
   d4dee:	2200      	movs	r2, #0
   d4df0:	605a      	str	r2, [r3, #4]

} // spark
   d4df2:	4770      	bx	lr
   d4df4:	2003e7c0 	.word	0x2003e7c0
   d4df8:	000d516c 	.word	0x000d516c

000d4dfc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d4dfc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d4dfe:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d4e00:	d902      	bls.n	d4e08 <pinAvailable+0xc>
    return false;
   d4e02:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d4e04:	b002      	add	sp, #8
   d4e06:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d4e08:	f1a0 030b 	sub.w	r3, r0, #11
   d4e0c:	2b02      	cmp	r3, #2
   d4e0e:	d81a      	bhi.n	d4e46 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4e10:	4c17      	ldr	r4, [pc, #92]	; (d4e70 <pinAvailable+0x74>)
   d4e12:	7821      	ldrb	r1, [r4, #0]
   d4e14:	f3bf 8f5b 	dmb	ish
   d4e18:	f011 0101 	ands.w	r1, r1, #1
   d4e1c:	d10b      	bne.n	d4e36 <pinAvailable+0x3a>
   d4e1e:	4620      	mov	r0, r4
   d4e20:	9101      	str	r1, [sp, #4]
   d4e22:	f7ff f93a 	bl	d409a <__cxa_guard_acquire>
   d4e26:	9901      	ldr	r1, [sp, #4]
   d4e28:	b128      	cbz	r0, d4e36 <pinAvailable+0x3a>
   d4e2a:	4812      	ldr	r0, [pc, #72]	; (d4e74 <pinAvailable+0x78>)
   d4e2c:	f7ff fbe8 	bl	d4600 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4e30:	4620      	mov	r0, r4
   d4e32:	f7ff f937 	bl	d40a4 <__cxa_guard_release>
   d4e36:	4b0f      	ldr	r3, [pc, #60]	; (d4e74 <pinAvailable+0x78>)
   d4e38:	7818      	ldrb	r0, [r3, #0]
   d4e3a:	f7ff fabf 	bl	d43bc <hal_spi_is_enabled>
   d4e3e:	2800      	cmp	r0, #0
   d4e40:	d1df      	bne.n	d4e02 <pinAvailable+0x6>
  return true; // 'pin' is available
   d4e42:	2001      	movs	r0, #1
   d4e44:	e7de      	b.n	d4e04 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d4e46:	2801      	cmp	r0, #1
   d4e48:	d809      	bhi.n	d4e5e <pinAvailable+0x62>
   d4e4a:	f000 f865 	bl	d4f18 <_Z19__fetch_global_Wirev>
   d4e4e:	2100      	movs	r1, #0
   d4e50:	7c00      	ldrb	r0, [r0, #16]
   d4e52:	f7ff fa9b 	bl	d438c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d4e56:	f080 0001 	eor.w	r0, r0, #1
   d4e5a:	b2c0      	uxtb	r0, r0
   d4e5c:	e7d2      	b.n	d4e04 <pinAvailable+0x8>
   d4e5e:	3809      	subs	r0, #9
   d4e60:	2801      	cmp	r0, #1
   d4e62:	d8ee      	bhi.n	d4e42 <pinAvailable+0x46>
   d4e64:	f7ff fe74 	bl	d4b50 <_Z22__fetch_global_Serial1v>
   d4e68:	7c00      	ldrb	r0, [r0, #16]
   d4e6a:	f7ff fa57 	bl	d431c <hal_usart_is_enabled>
   d4e6e:	e7f2      	b.n	d4e56 <pinAvailable+0x5a>
   d4e70:	2003e7c8 	.word	0x2003e7c8
   d4e74:	2003e7cc 	.word	0x2003e7cc

000d4e78 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4e78:	2823      	cmp	r0, #35	; 0x23
{
   d4e7a:	b538      	push	{r3, r4, r5, lr}
   d4e7c:	4604      	mov	r4, r0
   d4e7e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4e80:	d80a      	bhi.n	d4e98 <pinMode+0x20>
   d4e82:	29ff      	cmp	r1, #255	; 0xff
   d4e84:	d008      	beq.n	d4e98 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d4e86:	f7ff ffb9 	bl	d4dfc <pinAvailable>
   d4e8a:	b128      	cbz	r0, d4e98 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d4e8c:	4629      	mov	r1, r5
   d4e8e:	4620      	mov	r0, r4
}
   d4e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d4e94:	f7ff b9ca 	b.w	d422c <HAL_Pin_Mode>
}
   d4e98:	bd38      	pop	{r3, r4, r5, pc}

000d4e9a <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d4e9a:	b538      	push	{r3, r4, r5, lr}
   d4e9c:	4604      	mov	r4, r0
   d4e9e:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d4ea0:	f7ff ffac 	bl	d4dfc <pinAvailable>
   d4ea4:	b1f0      	cbz	r0, d4ee4 <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d4ea6:	2104      	movs	r1, #4
   d4ea8:	4620      	mov	r0, r4
   d4eaa:	f7ff f9b7 	bl	d421c <HAL_Validate_Pin_Function>
   d4eae:	2804      	cmp	r0, #4
   d4eb0:	d105      	bne.n	d4ebe <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d4eb2:	b2a9      	uxth	r1, r5
   d4eb4:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d4eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d4eba:	f7ff b9c7 	b.w	d424c <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d4ebe:	2102      	movs	r1, #2
   d4ec0:	4620      	mov	r0, r4
   d4ec2:	f7ff f9ab 	bl	d421c <HAL_Validate_Pin_Function>
   d4ec6:	2802      	cmp	r0, #2
   d4ec8:	d10c      	bne.n	d4ee4 <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d4eca:	4620      	mov	r0, r4
   d4ecc:	f7ff f9b6 	bl	d423c <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d4ed0:	2801      	cmp	r0, #1
   d4ed2:	d001      	beq.n	d4ed8 <_Z11analogWritetm+0x3e>
   d4ed4:	2804      	cmp	r0, #4
   d4ed6:	d105      	bne.n	d4ee4 <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d4ed8:	4629      	mov	r1, r5
   d4eda:	4620      	mov	r0, r4
}
   d4edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d4ee0:	f7ff b9bc 	b.w	d425c <hal_pwm_write_ext>
}
   d4ee4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4ee8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d4ee8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d4eea:	2300      	movs	r3, #0
   d4eec:	2520      	movs	r5, #32
   d4eee:	8043      	strh	r3, [r0, #2]
   d4ef0:	2314      	movs	r3, #20
{
   d4ef2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d4ef4:	8003      	strh	r3, [r0, #0]
   d4ef6:	6085      	str	r5, [r0, #8]
   d4ef8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4efa:	4906      	ldr	r1, [pc, #24]	; (d4f14 <_Z17acquireWireBufferv+0x2c>)
   d4efc:	4628      	mov	r0, r5
   d4efe:	f000 f83a 	bl	d4f76 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4f02:	4904      	ldr	r1, [pc, #16]	; (d4f14 <_Z17acquireWireBufferv+0x2c>)
	};
   d4f04:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4f06:	4628      	mov	r0, r5
   d4f08:	f000 f835 	bl	d4f76 <_ZnajRKSt9nothrow_t>
	};
   d4f0c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d4f0e:	4620      	mov	r0, r4
   d4f10:	bd38      	pop	{r3, r4, r5, pc}
   d4f12:	bf00      	nop
   d4f14:	000d51a0 	.word	0x000d51a0

000d4f18 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d4f18:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4f1a:	4d0f      	ldr	r5, [pc, #60]	; (d4f58 <_Z19__fetch_global_Wirev+0x40>)
   d4f1c:	7829      	ldrb	r1, [r5, #0]
   d4f1e:	f3bf 8f5b 	dmb	ish
   d4f22:	f011 0401 	ands.w	r4, r1, #1
{
   d4f26:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4f28:	d113      	bne.n	d4f52 <_Z19__fetch_global_Wirev+0x3a>
   d4f2a:	4628      	mov	r0, r5
   d4f2c:	f7ff f8b5 	bl	d409a <__cxa_guard_acquire>
   d4f30:	b178      	cbz	r0, d4f52 <_Z19__fetch_global_Wirev+0x3a>
   d4f32:	a801      	add	r0, sp, #4
   d4f34:	f7ff ffd8 	bl	d4ee8 <_Z17acquireWireBufferv>
   d4f38:	aa01      	add	r2, sp, #4
   d4f3a:	4621      	mov	r1, r4
   d4f3c:	4807      	ldr	r0, [pc, #28]	; (d4f5c <_Z19__fetch_global_Wirev+0x44>)
   d4f3e:	f7ff fe5d 	bl	d4bfc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d4f42:	4628      	mov	r0, r5
   d4f44:	f7ff f8ae 	bl	d40a4 <__cxa_guard_release>
   d4f48:	4a05      	ldr	r2, [pc, #20]	; (d4f60 <_Z19__fetch_global_Wirev+0x48>)
   d4f4a:	4906      	ldr	r1, [pc, #24]	; (d4f64 <_Z19__fetch_global_Wirev+0x4c>)
   d4f4c:	4803      	ldr	r0, [pc, #12]	; (d4f5c <_Z19__fetch_global_Wirev+0x44>)
   d4f4e:	f000 f80b 	bl	d4f68 <__aeabi_atexit>
	return wire;
}
   d4f52:	4802      	ldr	r0, [pc, #8]	; (d4f5c <_Z19__fetch_global_Wirev+0x44>)
   d4f54:	b007      	add	sp, #28
   d4f56:	bd30      	pop	{r4, r5, pc}
   d4f58:	2003e7d8 	.word	0x2003e7d8
   d4f5c:	2003e7dc 	.word	0x2003e7dc
   d4f60:	2003e634 	.word	0x2003e634
   d4f64:	000d4ba5 	.word	0x000d4ba5

000d4f68 <__aeabi_atexit>:
   d4f68:	460b      	mov	r3, r1
   d4f6a:	4601      	mov	r1, r0
   d4f6c:	4618      	mov	r0, r3
   d4f6e:	f000 b805 	b.w	d4f7c <__cxa_atexit>

000d4f72 <_ZdlPvj>:
   d4f72:	f7ff b890 	b.w	d4096 <_ZdlPv>

000d4f76 <_ZnajRKSt9nothrow_t>:
   d4f76:	f7ff b88c 	b.w	d4092 <_Znaj>
	...

000d4f7c <__cxa_atexit>:
   d4f7c:	b510      	push	{r4, lr}
   d4f7e:	4c05      	ldr	r4, [pc, #20]	; (d4f94 <__cxa_atexit+0x18>)
   d4f80:	4613      	mov	r3, r2
   d4f82:	b12c      	cbz	r4, d4f90 <__cxa_atexit+0x14>
   d4f84:	460a      	mov	r2, r1
   d4f86:	4601      	mov	r1, r0
   d4f88:	2002      	movs	r0, #2
   d4f8a:	f3af 8000 	nop.w
   d4f8e:	bd10      	pop	{r4, pc}
   d4f90:	4620      	mov	r0, r4
   d4f92:	e7fc      	b.n	d4f8e <__cxa_atexit+0x12>
   d4f94:	00000000 	.word	0x00000000

000d4f98 <memcpy>:
   d4f98:	440a      	add	r2, r1
   d4f9a:	4291      	cmp	r1, r2
   d4f9c:	f100 33ff 	add.w	r3, r0, #4294967295
   d4fa0:	d100      	bne.n	d4fa4 <memcpy+0xc>
   d4fa2:	4770      	bx	lr
   d4fa4:	b510      	push	{r4, lr}
   d4fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d4faa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d4fae:	4291      	cmp	r1, r2
   d4fb0:	d1f9      	bne.n	d4fa6 <memcpy+0xe>
   d4fb2:	bd10      	pop	{r4, pc}

000d4fb4 <memset>:
   d4fb4:	4402      	add	r2, r0
   d4fb6:	4603      	mov	r3, r0
   d4fb8:	4293      	cmp	r3, r2
   d4fba:	d100      	bne.n	d4fbe <memset+0xa>
   d4fbc:	4770      	bx	lr
   d4fbe:	f803 1b01 	strb.w	r1, [r3], #1
   d4fc2:	e7f9      	b.n	d4fb8 <memset+0x4>

000d4fc4 <srand>:
   d4fc4:	b538      	push	{r3, r4, r5, lr}
   d4fc6:	4b0d      	ldr	r3, [pc, #52]	; (d4ffc <srand+0x38>)
   d4fc8:	681d      	ldr	r5, [r3, #0]
   d4fca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d4fcc:	4604      	mov	r4, r0
   d4fce:	b97b      	cbnz	r3, d4ff0 <srand+0x2c>
   d4fd0:	2018      	movs	r0, #24
   d4fd2:	f7ff fabf 	bl	d4554 <malloc>
   d4fd6:	4a0a      	ldr	r2, [pc, #40]	; (d5000 <srand+0x3c>)
   d4fd8:	4b0a      	ldr	r3, [pc, #40]	; (d5004 <srand+0x40>)
   d4fda:	63a8      	str	r0, [r5, #56]	; 0x38
   d4fdc:	e9c0 2300 	strd	r2, r3, [r0]
   d4fe0:	4b09      	ldr	r3, [pc, #36]	; (d5008 <srand+0x44>)
   d4fe2:	6083      	str	r3, [r0, #8]
   d4fe4:	230b      	movs	r3, #11
   d4fe6:	8183      	strh	r3, [r0, #12]
   d4fe8:	2201      	movs	r2, #1
   d4fea:	2300      	movs	r3, #0
   d4fec:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d4ff0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d4ff2:	2200      	movs	r2, #0
   d4ff4:	611c      	str	r4, [r3, #16]
   d4ff6:	615a      	str	r2, [r3, #20]
   d4ff8:	bd38      	pop	{r3, r4, r5, pc}
   d4ffa:	bf00      	nop
   d4ffc:	2003e5d0 	.word	0x2003e5d0
   d5000:	abcd330e 	.word	0xabcd330e
   d5004:	e66d1234 	.word	0xe66d1234
   d5008:	0005deec 	.word	0x0005deec

000d500c <strlen>:
   d500c:	4603      	mov	r3, r0
   d500e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5012:	2a00      	cmp	r2, #0
   d5014:	d1fb      	bne.n	d500e <strlen+0x2>
   d5016:	1a18      	subs	r0, r3, r0
   d5018:	3801      	subs	r0, #1
   d501a:	4770      	bx	lr

000d501c <dynalib_user>:
   d501c:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d502c:	0000 0000                                   ....

000d5030 <_ZTVN5spark13EthernetClassE>:
	...
   d5038:	45e3 000d 45d9 000d 45cf 000d 45c5 000d     .E...E...E...E..
   d5048:	45b9 000d 45ad 000d 4cd1 000d 4cd9 000d     .E...E...L...L..
   d5058:	45a1 000d 4599 000d 458f 000d 4585 000d     .E...E...E...E..
   d5068:	4d09 000d 7061 0070 5925 252d 2d6d 6425     .M..app.%Y-%m-%d
   d5078:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d5088:	6d69 0065                                   ime.

000d508c <_ZTV9IPAddress>:
	...
   d5094:	48c5 000d 48b5 000d 48b7 000d               .H...H...H..

000d50a0 <_ZTV9USBSerial>:
	...
   d50a8:	49a5 000d 4a0d 000d 49e3 000d 469d 000d     .I...J...I...F..
   d50b8:	49d5 000d 49a7 000d 49b7 000d 4a07 000d     .I...I...I...J..
   d50c8:	49c7 000d 49a1 000d                         .I...I..

000d50d0 <_ZTV11USARTSerial>:
	...
   d50d8:	4aa9 000d 4b15 000d 4aed 000d 469d 000d     .J...K...J...F..
   d50e8:	4abd 000d 4ad9 000d 4acb 000d 4ae7 000d     .J...J...J...J..
   d50f8:	4aab 000d 4aaf 000d                         .J...J..

000d5100 <_ZTV7TwoWire>:
	...
   d5108:	4ba5 000d 4bef 000d 4bc7 000d 4ba7 000d     .K...K...K...K..
   d5118:	4bcf 000d 4bd7 000d 4bdf 000d 4be7 000d     .K...K...K...K..

000d5128 <_ZTVN5spark9WiFiClassE>:
	...
   d5130:	4c73 000d 4c69 000d 4c5f 000d 4c21 000d     sL..iL.._L..!L..
   d5140:	472f 000d 4c53 000d 4cd1 000d 4cd9 000d     /G..SL...L...L..
   d5150:	4c47 000d 4c3f 000d 4c35 000d 4c2b 000d     GL..?L..5L..+L..
   d5160:	4d09 000d                                   .M..

000d5164 <_ZTVN5spark12NetworkClassE>:
	...
   d516c:	4c91 000d 4c9b 000d 4ca5 000d 4caf 000d     .L...L...L...L..
   d517c:	4cb9 000d 4cc5 000d 4cd1 000d 4cd9 000d     .L...L...L...L..
   d518c:	4ce1 000d 4ced 000d 4cf5 000d 4cff 000d     .L...L...L...L..
   d519c:	4d09 000d                                   .M..

000d51a0 <_ZSt7nothrow>:
	...

000d51a1 <link_const_variable_data_end>:
   d51a1:	00          	.byte	0x00
	...

000d51a4 <link_constructors_location>:
   d51a4:	000d41c1 	.word	0x000d41c1
   d51a8:	000d45ed 	.word	0x000d45ed
   d51ac:	000d4615 	.word	0x000d4615
   d51b0:	000d4675 	.word	0x000d4675
   d51b4:	000d473d 	.word	0x000d473d
   d51b8:	000d474d 	.word	0x000d474d
   d51bc:	000d4775 	.word	0x000d4775
   d51c0:	000d4c7d 	.word	0x000d4c7d
   d51c4:	000d4de9 	.word	0x000d4de9

000d51c8 <link_constructors_end>:
	...
